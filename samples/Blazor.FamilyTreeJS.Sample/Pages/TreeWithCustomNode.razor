@page "/tree-with-custom-node"

<PageTitle>Tree with Custom Node</PageTitle>

<h1>Tree with Custom Node</h1>

<button class="btn btn-primary" style="margin-bottom: 0.5rem;" @onclick=@OnResetClick>
  Reset
</button>

<p>Number of nodes in family tree: @_nodesCount</p>

<div style="margin-left: 5rem; margin-right: 5rem;">
  <FamilyTree @ref=@_familyTree
              TNode="CustomNode"
              OnUpdatedNode=@OnUpdateNode
              OnDefaultFirstNode=@OnDefaultFirstNode
              OnPhotoUpload=@OnPhotoUpload
              TreeId="tree-with-custom-node"
              Options=@_options />
</div>

@code
{
  private record CustomNode : Node
  {
    public string Title { get; init; } = string.Empty;
  }

  private FamilyTreeOptions<CustomNode> _options = null!;

  private FamilyTree<CustomNode> _familyTree = null!;

  private int _nodesCount = 1;

  private Task OnUpdateNode(UpdateNodeArgs<CustomNode> args)
  {
    _nodesCount += args.AddNodesData.Count;
    if (args.RemoveNodeId is not null)
    {
      _nodesCount -= 1;
    }
    return Task.CompletedTask;
  }

  private CustomNode OnDefaultFirstNode()
  {
    _nodesCount += 1;
    StateHasChanged();
    return new() { Id = "_", Gender = Gender.Male, Title = "Accountant" };
  }

  private Task<string> OnPhotoUpload(PhotoUploadArgs args)
    => Task.FromResult("After the photo is uploaded, its URL should be set here.");

  private async Task OnResetClick()
  {
    await _familyTree.ResetAsync();
    _nodesCount = 0;
  }

  protected override void OnInitialized()
  {
    _options = new(
      Mode: "dark",
      Template: Template.Hugo,
      NodeBinding: new Dictionary<string, string>() 
      { 
        { NodeBinding.Field0, "name" },
        { NodeBinding.Field1, "title" },
        { NodeBinding.Img0, "photo" },
      },
      Nodes: new List<CustomNode>
      { 
        new() { Id = "123", Gender = Gender.Male, Name = "Jack Smith", Title = "Senior Consultant"}
      },
      NodeMenu: new() {
        Details = new(Text: "Show details"),
        Edit = new(Text: "Edit details"),
        Remove = new(
          Text: "Remove node",
          // Although Action means "void" and the lambda is async,
          // we can just let it run without awaiting and not needing
          // to know whether the async lambda succeeds or not
          // Unfortunately FamilyTreeJS does not use async callback.
          OnClick: (Action<string, object?>)
            (async (nodeId, _) => await _familyTree.RemoveNodeAsync(nodeId))
        )
      },
      NodeTreeMenu: true,
      EditForm: new(
        ReadOnly: false,
        PhotoBinding: "photo",
        AddMore: string.Empty,
        Buttons: new Dictionary<string, ButtonEdit?>()
        {
          { "pdf", null },
          { "share", null},
          { "remove", null}
        },
        Elements: new List<EditFormElement>()
        {
          new(Type: "date", Label: "Birth Date", Binding: "birthDate"),
          new(Type: "date", Label: "Death Date", Binding: "deathDate"),
          new(Type: "textbox", Label: "Photo", Binding: "photo", Btn: "Upload photo"),
          new(Type: "textbox", Label: "Full Name", Binding: "name"),
          new(Type: "textbox", Label: "Title", Binding: "title"),
          new(
            Type: "select", Label: "Gender", Binding: "gender",
            Options: new List<Dictionary<string, string>>()
            {
              new() { { "value", "male" }, { "text", "Male" } },
              new() { { "value", "female" }, { "text", "Female" } }
            }
          )
        }
      )
    );
  }
}
