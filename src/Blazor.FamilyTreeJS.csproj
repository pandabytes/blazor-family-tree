<Project Sdk="Microsoft.NET.Sdk.Razor">

  <PropertyGroup>
    <TargetFramework>net7.0</TargetFramework>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Blazor.Core" Version="1.0.1" />
    <PackageReference Include="Microsoft.AspNetCore.Components.WebAssembly" Version="7.0.10" />
    <PackageReference Include="Microsoft.AspNetCore.Components.WebAssembly.DevServer" Version="7.0.10" PrivateAssets="all" />
    <PackageReference Include="Microsoft.AspNetCore.Components.Web" Version="7.0.11" />
    <PackageReference Include="Microsoft.Extensions.DependencyInjection" Version="7.0.0" PrivateAssets="all" />
    <PackageReference Include="Microsoft.TypeScript.MSBuild" Version="5.2.2">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Node.js.redist" Version="17.2.0" />
  </ItemGroup>

  <!-- This custom task sets the current process's env var -->
  <UsingTask TaskName="SetEnvironmentVariableTask"
             TaskFactory="RoslynCodeTaskFactory" 
             AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
    <ParameterGroup>
      <Name ParameterType="System.String" Required="true" />
      <Value ParameterType="System.String" Required="true" />
    </ParameterGroup>

    <Task>
      <Using Namespace="System" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[ Environment.SetEnvironmentVariable(Name, Value, EnvironmentVariableTarget.Process); ]]>
      </Code>
    </Task>
  </UsingTask>

  <!-- Determine which node binary to use based on the OS platform -->
  <!-- https://github.com/dotnet/msbuild/issues/2468#issuecomment-324694593 -->
  <PropertyGroup Condition="$([MSBuild]::IsOSPlatform('Windows'))" >
    <NodePath>$(NuGetPackageFolders)node.js.redist\17.2.0\tools\win-x64</NodePath>
  </PropertyGroup>

  <PropertyGroup Condition="$([MSBuild]::IsOSPlatform('Linux'))" >
    <NodePath>$(NuGetPackageFolders)node.js.redist\17.2.0\tools\linux-x64</NodePath>
  </PropertyGroup>

  <Target Name="SetPathOnMacOS" BeforeTargets="BeforeBuild" Condition="$([MSBuild]::IsOSPlatform('macOS'))">
    <PropertyGroup>
      <!-- For M1 mac -->
      <NodePath>$(NuGetPackageFolders)node.js.redist\17.2.0\tools\osx-arm64</NodePath>
      <UpdatePath>$(PATH):$(NodePath)</UpdatePath>
    </PropertyGroup>

    <SetEnvironmentVariableTask Name="PATH" Value="$(UpdatePath)" />
  </Target>

  <!-- Run "npm install" when package.json has not changed.
       This prevents npm install to run every time dotnet build is run.
       Taken from: https://www.meziantou.net/running-npm-tasks-when-building-a-dotnet-project.htm
  -->
  <PropertyGroup>
    <ProjectRoot>$(MSBuildProjectDirectory)</ProjectRoot>
    <NpmInstallStampFile>$(ProjectRoot)/node_modules/.install-stamp</NpmInstallStampFile>
  </PropertyGroup>

  <Target Name="RemoveWwwRootBeforeBuild" BeforeTargets="BeforeBuild">
    <RemoveDir Directories="$(MSBuildProjectDirectory)/wwwroot/"/>
  </Target>

  <Target Name="NpmInstall" BeforeTargets="BeforeBuild" Inputs="$(ProjectRoot)/package.json" Outputs="$(NpmInstallStampFile)">
    <Exec WorkingDirectory="$(NpmRoot)"
          Command="npm install" />
    <Touch Files="$(NpmInstallStampFile)" AlwaysCreate="true" />
  </Target>

  <Target Name="RunNpmBuild" AfterTargets="PostBuildEvent">
    <Exec WorkingDirectory="$(ProjectRoot)"
          Command="npm run rollup-build" />
  </Target>
</Project>
